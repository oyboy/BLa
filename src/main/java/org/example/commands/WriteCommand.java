package org.example.commands;

import org.example.Matrix;
import org.example.Type;
import picocli.CommandLine;

import java.util.*;

@CommandLine.Command(name="write", description = "write(subject, object_name, permission)")
public class WriteCommand extends DefaultFields implements Runnable {
    private final Matrix subjectMatrix;
    private final Matrix objectMatrix;
    private final Matrix accessMatrix;

    public WriteCommand(Matrix subjectMatrix, Matrix objectMatrix, Matrix accessMatrix) {
        this.subjectMatrix = subjectMatrix;
        this.objectMatrix = objectMatrix;
        this.accessMatrix = accessMatrix;
    }

    public WriteCommand() {
        this(new Matrix(Type.SUBJECTS), new Matrix(Type.OBJECTS), new Matrix(Type.ACCESS));
    }

    @Override
    public void run() {
        Map<String, String> subjectLevels = subjectMatrix.readSecrecyLevels();
        Map<String, String> objectLevels = objectMatrix.readSecrecyLevels();
        Map<String, Map<String, List<String>>> rightsMatrix = accessMatrix.readMatrix();

        String subjectLevel = subjectLevels.get(subject);
        String objectLevel = objectLevels.get(object);

        if (subjectLevel == null || objectLevel == null) {
            System.out.println("–£—Ä–æ–≤–Ω–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Å—É–±—ä–µ–∫—Ç–∞ –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞.");
            return;
        }

        List<String> rights = rightsMatrix.getOrDefault(subject, new HashMap<>()).getOrDefault(object, new ArrayList<>());
        if (rights.contains("write")) {
            System.out.println("–ó–∞–ø–∏—Å—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –£ —Å—É–±—ä–µ–∫—Ç–∞ —É–∂–µ –µ—Å—Ç—å –ø—Ä–∞–≤–æ –Ω–∞ –∑–∞–ø–∏—Å—å.");
            return;
        }

        if (compareLevels(subjectLevel, objectLevel) <= 0) {
            System.out.println("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω.");
        } else {
            System.out.println("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞.");
            System.out.println("–†–∞–∑—Ä–µ—à–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤? (yes/no)");
            rewritePermissions();
        }
    }
    private void rewritePermissions() {
        Scanner scanner = new Scanner(System.in);
        if (!scanner.nextLine().equalsIgnoreCase("yes")) {
            System.out.println("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");
            return;
        }

        Map<String, String> subjectLevels = subjectMatrix.readSecrecyLevels();
        Map<String, String> objectLevels = objectMatrix.readSecrecyLevels();
        Map<String, Map<String, List<String>>> access = accessMatrix.readMatrix();

        String objectLevel = objectLevels.get(object);
        if (objectLevel == null) {
            System.err.println("–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }
        subjectLevels.put(subject, objectLevel);
        subjectMatrix.writeSecrecyLevels(subjectLevels);

        // üîÅ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
        Map<String, List<String>> newRights = new HashMap<>();
        for (Map.Entry<String, String> entry : objectLevels.entrySet()) {
            String objName = entry.getKey();
            String objLevel = entry.getValue();
            List<String> rights = determineRights(objectLevel, objLevel);
            if (!rights.isEmpty()) {
                newRights.put(objName, rights);
            }
        }

        access.put(subject, newRights);
        accessMatrix.writeMatrix(access);

        System.out.println("–£—Ä–æ–≤–µ–Ω—å —Å—É–±—ä–µ–∫—Ç–∞ –ø–æ–Ω–∏–∂–µ–Ω –¥–æ " + objectLevel + ", –ø—Ä–∞–≤–∞ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã.");
    }
    private List<String> determineRights(String subjectLevel, String objectLevel) {
        Map<String, Integer> levelMap = Map.of("LOW", 1, "MEDIUM", 2, "HIGH", 3);
        int sLevel = levelMap.getOrDefault(subjectLevel, 0);
        int oLevel = levelMap.getOrDefault(objectLevel, 0);

        if (sLevel == oLevel) return Arrays.asList("read", "write");
        else if (sLevel > oLevel) return Collections.singletonList("read");
        else return Collections.singletonList("write"); // ‚Üê –∫–∞–∫ —Ä–∞–∑ —Ç–æ—Ç —Å–ª—É—á–∞–π!
    }


    private int compareLevels(String subjectLevel, String objectLevel) {
        Map<String, Integer> levelMap = new HashMap<>();
        levelMap.put("LOW", 1);
        levelMap.put("MEDIUM", 2);
        levelMap.put("HIGH", 3);

        int subjectRank = levelMap.getOrDefault(subjectLevel, 0);
        int objectRank = levelMap.getOrDefault(objectLevel, 0);

        return Integer.compare(subjectRank, objectRank);
    }
}